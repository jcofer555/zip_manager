Menu="Utilities"
Type="xmenu"
Title="Archiver"
Icon="zip.png"
Tag="zip.png"
Markdown="false"
---
<?php
$logDir = '/boot/config/plugins/zip_manager/logs';

if (!is_dir($logDir)) {
  mkdir($logDir, 0755, true);
}
?>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
.field-row {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
}

.field-row label {
  width: 160px;
  font-weight: bold;
  color: white;
}

.field-row input {
  max-width: 300px;
  flex: 1;
  padding: 6px;
  border-radius: 4px;
  background-color: #111111;
  color: orange;
  cursor: pointer;
}

#pickerModal {
  display: none;
  position: relative;
  background: #111111;
  border: 1px solid orange;
  padding: 12px;
  color: orange;
  font-family: monospace;
  font-size: 16px;
  width: 448px;
  max-height: 220px;
  overflow-y: auto;
}

#breadcrumb {
  margin-bottom: 10px;
  color: orange;
  font-family: monospace;
  user-select: none;
}

#breadcrumb span {
  cursor: pointer;
  text-decoration: underline;
  margin-right: 5px;
}

#breadcrumb span.separator {
  cursor: default;
  text-decoration: none;
  margin-right: 5px;
  color: gray;
}

#fileList {
  padding-left: 18px;
  list-style: none;
  margin: 0;
  color: orange;
}

#fileList li {
  display: block;
  margin: 4px 0;
  font-family: monospace;
  font-size: 16px;
}

#fileList span {
  color: orange;
  padding: 4px 8px;
  cursor: pointer;
  font-family: monospace;
  font-size: 16px;
}

#fileList span:hover {
  text-decoration: underline;
}

#breadcrumb {
  color: green;
  user-select: none;
  margin-bottom: 8px;
  font-family: monospace; /* optional */
  white-space: nowrap; /* keep breadcrumb on one line */
}

#breadcrumb span {
  cursor: pointer;
  padding: 0;
  margin: 0;
  transition: color 0.2s ease;
  display: inline-block;
}

#breadcrumb span:hover:not(.separator) {
  color: red;
}

#breadcrumb .separator {
  cursor: default;
  padding: 0 1px;
  margin: 0;
  color: orange;
  user-select: none;
  pointer-events: none;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  20%, 60% { transform: translateX(-8px); }
  40%, 80% { transform: translateX(8px); }
}

.shake {
  animation: shake 0.5s;
}

@keyframes statusPulse {
  0%   { background-color: #2a2a2a; }
  20%  { background-color: #3a3a3a; }
  40%  { background-color: #444; }
  60%  { background-color: #3a3a3a; }
  80%  { background-color: #2f2f2f; }
  100% { background-color: #2a2a2a; }
}

#statusBox {
  display: inline-block;         /* limit width to content */
  padding: 0px 0px;
  border-radius: 6px;
  color: orange;
  margin-top: 0px;
  font-weight: bold;
  max-width: 90%;                /* prevent overflow */
  word-wrap: break-word;
}

#statusBox.animate-pulse {
  animation: statusPulse 1s ease;
}

#statusBox:empty {
  display: none;
}

body {
  background-color: #111111;
}

.highlight-input {
  background-color: #111111;
  color: orange;
  border: 1px solid orange;
  padding: 6px;
  border-radius: 4px;
  font-family: monospace;
  transition: background-color 0.2s ease;
}

.highlight-input:focus {
  background-color: #2a2a2a;
  outline: none; /* removes browser default blue border */
  box-shadow: 0 0 6px 2px rgba(255, 165, 0, 0.4); /* orange glow */
  transition: box-shadow 0.2s ease, background-color 0.2s ease;
}

.hidden {
  display: none !important;
}

.format-dropdown {
  background-color: #111111;
  color: orange;
  font-family: monospace;
  font-size: 16px;
  padding: 6px;
  width: 75px !important;
  min-width: 0 !important;
  max-width: 75px !important;
  appearance: none; /* removes default arrow */
  cursor: pointer;
}

/* Optional: add a custom arrow */
.format-dropdown::after {
  content: "‚ñæ";
  pointer-events: none;
}

/* Style the dropdown options */
.format-dropdown option {
  color: orange;
  background-color: #111111;
}

.input-wrapper {
  position: relative;
  display: inline-block;
}

#fileCountDisplay {
  position: absolute;
  top: 20%;
  left: 28%; /* anchor to the right of the input field */
  transform: translateY(-50%);
  width: 275px; /* fixed width to prevent shifting */
  font-family: monospace;
  color: orange;
  font-size: 16px;
  font-weight: bold;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>

<?php
// Dynamically generate the Archiver page URL with CSRF token
$csrfToken = $_GET['csrf_token'] ?? ''; // Or retrieve from session if needed
$extractorUrl = "/Settings/Extractor" . ($csrfToken ? "?csrf_token=" . urlencode($csrfToken) : '');
?>

<div style="display: flex; justify-content: end; align-items: flex-start; margin-bottom: 0.1em;">

  <!-- Button container -->
  <div style="display: flex; flex-direction: row; gap: 0.5em; align-items: flex-start; margin-left: 1em;">
    <!-- Extractor Page -->
    <form action="<?= htmlspecialchars($extractorUrl) ?>" method="get" style="margin: 0;">
      <input type="submit" value="üì§ Extractor Page" style="margin-top: 0.1em;">
    </form>

    <!-- Support Forum -->
    <form action="https://forums.unraid.net/topic/191678-7-zip-for-unraid/" method="get" target="_blank"
      style="margin: 0;">
      <input type="submit" value="‚ùì Support Forum" style="margin-top: 0.1em;">
    </form>

    <!-- Generate Diagnostics ZIP -->
    <form method="post" style="margin: 0;">
      <input type="submit" name="generate_diagnostics" value="üõ†Ô∏è Generate Diagnostics" style="margin-top: 0.1em;">
    </form>
  </div>
</div>

<div style="display: flex;">
  <div style="margin-left: auto; width: 240px;">
    <?php
    if (isset($_POST['generate_diagnostics'])) {
      $diagFolder = '/boot/config/plugins/zip_manager/zip_manager_diagnostics';
      $diagZip = '/boot/config/plugins/zip_manager/zip_manager_diagnostics.zip';
      $debugLog = '/boot/config/plugins/zip_manager/logs/zip_manager_diagnostic_debug.log';

      // Cleanup previous
      @exec("rm -rf " . escapeshellarg($diagFolder));
      @unlink($diagZip);
      @unlink($debugLog);

      mkdir($diagFolder, 0755, true);

      // Files to redact + copy
      $logFiles = [
        'archiver_debug.log',
        'extractor_debug.log',
      ];

      foreach ($logFiles as $filename) {
        $src = "/boot/config/plugins/zip_manager/logs/$filename";
        $dest = "$diagFolder/$filename";

        if (!file_exists($src))
          continue;

        $content = file_get_contents($src);

if ($filename === 'archiver_debug.log') {
  $excludedPaths = ['/usr/bin/7zzs'];
  $excludedMessages = [
    "Trial version             Type 'rar -?' for help",
    "Evaluation copy. Please register.",
  ];

  $lines = explode("\n", $content);
  $redactedLines = [];

  foreach ($lines as $line) {
    if (in_array(trim($line), $excludedMessages)) {
      continue;
    }

    $srcAssigned = false;
    $destAssigned = false;

    $line = preg_replace('/^- (.+)$/', '- [REDACTED_NAME]', $line);
    $line = preg_replace('#^(‚úÖ chown succeeded: )(.+?) ->#', '$1[SRC] ->', $line);
    $line = preg_replace('#^(‚úÖ chmod applied: )(.+?) ->#', '$1[SRC] ->', $line);

    // üîê Mask -p'password' or -p"password" or -p123
    $line = preg_replace("/-p(['\"]?)[^'\"]+\\1/", "-p'[REDACTED]'", $line);

    // üîí Mask /mnt/... paths as [SRC] and [DEST]
    $line = preg_replace_callback(
      '#[\'"]?(/mnt/[^\'"\s‚Üí\n\r]+(?:/[^\'"\s‚Üí\n\r]*)*)[\'"]?#',
      function ($match) use (&$srcAssigned, &$destAssigned, $excludedPaths) {
        $path = $match[1];

        foreach ($excludedPaths as $excluded) {
          if (strpos($path, $excluded) === 0) {
            return $match[0]; // leave unchanged
          }
        }

        if (!$srcAssigned) {
          $srcAssigned = true;
          return '[SRC]';
        } elseif (!$destAssigned) {
          $destAssigned = true;
          return '[DEST]';
        } else {
          return '[REDACTED]';
        }
      },
      $line
    );

    $redactedLines[] = $line;
  }

  $content = implode("\n", $redactedLines);
}

if ($filename === 'extractor_debug.log') {
  $excludedPaths = ['/usr/bin/7zzs'];
  $lines = explode("\n", $content);
  $redactedLines = [];

  foreach ($lines as $line) {
    $srcAssigned = false;
    $destAssigned = false;

    $line = preg_replace('/^- (.+)$/', '- [REDACTED_NAME]', $line);
    $line = preg_replace('#^(‚úÖ chown succeeded: )(.+?) ->#', '$1[SRC] ->', $line);
    $line = preg_replace('#^(‚úÖ chmod applied: )(.+?) ->#', '$1[SRC] ->', $line);

    // üîê Mask -p'password' or -p"password" or -p123
    $line = preg_replace("/-p(['\"]?)[^'\"]+\\1/", "-p'[REDACTED]'", $line);

    // üîí Mask /mnt/... paths as [SRC] and [DEST]
    $line = preg_replace_callback(
      '#[\'"]?(/mnt/[^\'"\s‚Üí\n\r]+(?:/[^\'"\s‚Üí\n\r]*)*)[\'"]?#',
      function ($match) use (&$srcAssigned, &$destAssigned, $excludedPaths) {
        $path = $match[1];

        // Skip excluded paths
        foreach ($excludedPaths as $excluded) {
          if (strpos($path, $excluded) === 0) {
            return $match[0]; // leave unchanged
          }
        }

        if (!$srcAssigned) {
          $srcAssigned = true;
          return '[SRC]';
        } elseif (!$destAssigned) {
          $destAssigned = true;
          return '[DEST]';
        } else {
          return '[REDACTED]';
        }
      },
      $line
    );

    $redactedLines[] = $line;
  }

  $content = implode("\n", $redactedLines);
}

        file_put_contents($dest, $content);
      }

      // Redacted system info (remove hostname)
      $hostname = php_uname('n');
      $plgFile = '/boot/config/plugins/zip_manager.plg';

      if (file_exists($plgFile)) {
        $raw = file_get_contents($plgFile);
        libxml_use_internal_errors(true);
        $xml = simplexml_load_string($raw);
        if ($xml === false) {
          echo "Failed to parse XML.";
          foreach (libxml_get_errors() as $error) {
            echo "<br>", htmlspecialchars($error->message);
          }
        } else {
          $version = (string) $xml['version'] ?? 'unknown';
        }
      }

      $sysInfo = "Generated: " . date('Y-m-d H:i:s') . "\n";
      $sysInfo .= str_replace($hostname, '[REDACTED_HOST]', php_uname()) . "\n";
      $sysInfo .= "PHP Version: " . phpversion() . "\n";
      $sysInfo .= "Plugin Version: " . $version . "\n";

      file_put_contents("$diagFolder/system_info.log", $sysInfo);

      // Create ZIP
      $cmd = "/usr/bin/7zzs a -tzip " . escapeshellarg($diagZip) . " " . escapeshellarg($diagFolder) . " 2>&1";
      exec($cmd, $zipOutput, $exitCode);
      file_put_contents($debugLog, implode("\n", $zipOutput));

      // Delete diagnostics folder after zip created
      exec("rm -rf " . escapeshellarg($diagFolder));

      if (file_exists($diagZip)) {
        echo "<p style='color:green;'>‚úÖ Diagnostics created: <a href='/boot/config/plugins/zip_manager/" . basename($diagZip) . "' download>Download ZIP</a></p>";
      } else {
        echo "<p style='color:red;'>‚ùå Failed to create diagnostics zip (code $exitCode)</p>";
      }
    }
    ?>
  </div>
</div>

<div style="position: relative;">
  <!-- üß© Left: Archiving Form -->
  <div style="max-width: 640px;">
    <h2 style="margin: 0; margin-bottom: 8px; color: white;">üì¶ Create archive using 7-zip</h2>

    <!-- üìÅ Picker Modal -->
     <div style="position: relative;">
    <div id="pickerModal" style="display: none;">
      <div id="breadcrumb"></div>
      <ul id="fileList"></ul>
    </div>
  </div>
    <br>

    <!-- ‚ö†Ô∏è Overwrite Confirmation Modal -->
    <div id="overwriteModal" style="display: none; margin-top: 12px; background: #111111; border: 1px solid orange; font-size: 16px; padding: 12px; color: orange; max-width: 448px;">
      <div id="overwriteHeader" style="font-weight: bold; margin-bottom: 8px; color: white;">‚ö†Ô∏è The following files may be overwritten:</div>
      <ul id="overwriteList" style="max-height: 200px; list-style: none; overflow-y: auto; padding-left: 18px;"></ul>
      <div style="margin-top: 12px;">
        <button id="overwriteConfirm" style="margin-right: 8px;">‚úÖ Continue</button>
        <button id="overwriteCancel">‚ùå Cancel</button>
      </div>
    </div>
  </div>
  <br>

<div class="field-row">
  <label for="inputFile">Files to archive:</label>
    <input type="text" id="inputFile" class="highlight-input"
  placeholder="Click to browse - Multiple is allowed" readonly
  onclick="openPicker('inputFile', false, '/mnt/')" />
    <span id="fileCountDisplay" data-total-bytes="0"></span>
  </div>
<div id="selectedTags" style="margin-top: 8px; display: flex; flex-wrap: wrap; gap: 6px;"></div>
<br>

    <div class="field-row">
      <label for="outputDir">Output Directory:</label>
      <input type="text" id="outputDir" class="highlight-input"
        placeholder="Click to browse" readonly
        onclick="openPicker('outputDir', true, document.getElementById('outputDir').value || '/mnt/')" />
    </div>

    <div class="field-row">
      <label for="archiveName">Archive name:</label>
      <input type="text" id="archiveName" class="highlight-input"
        placeholder="Enter archive name" value="archive" />
    </div>

<div id="passwordField" class="field-row hidden">
  <label for="archivePassword">Archive password:</label>
    <input type="password" id="archivePassword" class="highlight-input" placeholder="Optional" />
    <span id="togglePasswordWrapper" style="display: none; margin-left: 29px;">
      <label style="color: orange; font-size: 16px; cursor: pointer;">
        <input type="checkbox" id="togglePassword" onchange="togglePasswordVisibility()" style="margin-right: 4px;" />
        Show
      </label>
    </span>
</div>

    <div class="field-row">
      <label for="archiveFormat" style="color: white;">Archive format:</label>
      <select id="archiveFormat" class="format-dropdown">
        <option value="7z">7z</option>
        <option value="rar">rar</option>
        <option value="zip">zip</option>
        <option value="tar">tar</option>
        <option value="tar.gz">tar.gz</option>
        <option value="zstd">tar.zst</option>
        <option value="cbz">cbz</option>
        <option value="cbr">cbr</option>
      </select>
    </div>

    <button onclick="runArchiving()">üöÄ Create Archive</button>
    <button onclick="clearForm()">üßπ Clear Form</button>
    <br/><br/>
    <div id="statusBox"></div>

  <!-- üìú Right: Floating Archiving History -->
  <div style="position: absolute; top: 6px; right: 300px; width: 825px;">
    <div onclick="toggleHistory()" style="cursor: pointer; display: flex; align-items: center; color: white; margin-bottom: 8px;">
      <span id="historyArrow" style="display: inline-block; width: 20px;">‚ñº</span>
      <h2 style="margin: 0;">üìú Archiving history</h2>
    </div>

    <div id="historyContainer" style="margin-top: 10px;">
      <div id="archiveLogBox" style="background: #111111; padding: 10px; color: lightgray; max-height: 250px; width: 1090px; overflow-y: auto; font-family: monospace; font-size: 14px; line-height: 1.4em;"></div>
      <div id="archiveLogPlaceholder" style="display: none; color: gray; font-style: italic; margin-top: 8px;">No archiving history!</div>
    </div>

    <button onclick="cleararchiveHistory()" style="margin-top: 12px;">üßπ Clear History</button>

    <!-- üß® Clear History Modal -->
    <div id="clearHistoryModal" style="display:none; margin-top:12px; background:#111111; border:1px solid orange; padding:12px; color:orange; max-width:448px;">
      <div style="font-weight:bold; margin-bottom:8px;">‚ö†Ô∏è Clear archiving history?</div>
      <div>This will remove all previous archiving records. This cannot be undone.</div>
      <div style="margin-top:12px;">
        <button id="clearHistoryConfirm" style="margin-right:8px;">‚úÖ Yes, Clear</button>
        <button id="clearHistoryCancel">‚ùå Cancel</button>
      </div>
    </div>
  </div>
</div>

<script>
  function togglePasswordVisibility() {
  const passwordInput = document.getElementById("archivePassword");
  const toggle = document.getElementById("togglePassword");
  passwordInput.type = toggle.checked ? "text" : "password";
}

function toggleHistory() {
  const container = document.getElementById("historyContainer");
  const arrow = document.getElementById("historyArrow");

  const visible = container.style.display !== "none";
  container.style.display = visible ? "none" : "block";
  arrow.textContent = visible ? "‚ñ∂" : "‚ñº";
}
function refresharchiveLog() {
  fetch("/boot/config/plugins/zip_manager/logs/archiver_history.log")
    .then(res => {
      if (!res.ok) throw new Error("Log not found");
      return res.text();
    })
    .then(data => {
      const trimmed = data.trim();
      const logBox = document.getElementById("archiveLogBox");

      if (trimmed) {
        logBox.style.display = "block";
        logBox.innerText = trimmed;
      } else {
        logBox.style.display = "none";
        showNoHistoryMessage();
      }
    })
    .catch(() => {
      document.getElementById("archiveLogBox").style.display = "none";
      showNoHistoryMessage();
    });
}

function showNoHistoryMessage() {
  const placeholder = document.getElementById("archiveLogPlaceholder");
  placeholder.innerText = "No archiving history!";
  placeholder.style.display = "block";
}

function cleararchiveHistory() {
  const modal = document.getElementById("clearHistoryModal");
  const confirmBtn = document.getElementById("clearHistoryConfirm");
  const cancelBtn = document.getElementById("clearHistoryCancel");
  const logBox = document.getElementById("archiveLogBox");

  modal.style.display = "block";

  confirmBtn.onclick = () => {
    modal.style.display = "none";
    fetch("/plugins/zip_manager/helpers/clear_archive_history.php", { method: "GET" })
      .then(res => res.text())
      .then(() => {
        logBox.innerText = "No archiving history!";
        logBox.style.display = "block";
      })
      .catch(() => {
        logBox.innerText = "‚ùå Failed to clear history.";
        logBox.style.display = "block";
      });
  };

  cancelBtn.onclick = () => {
    modal.style.display = "none";
  };
}

function parentDirectory(path) {
  if (!path) return '/mnt/';
  // Normalize slashes
  if (!path.endsWith('/')) {
    path = path.substring(0, path.lastIndexOf('/') + 1);
  }
  if (path === '') path = '/mnt/';
  return path;
}

function showSelected(path, size) {
  const list = document.getElementById("selectedFiles");
  if (list.querySelector(`li[data-path="${path}"]`)) return; // avoid duplicates

  const item = document.createElement("li");
  item.textContent = `${path} (${size})`;
  item.dataset.path = path;
  list.appendChild(item);
}

function removeSelected(path) {
  const list = document.getElementById("selectedFiles");
  const item = list.querySelector(`li[data-path="${path}"]`);
  if (item) list.removeChild(item);
}

let isModalLocked = false;
let disallowedBaseFolders = [];
let clickTimer = null;
let currentTargetId = null;
let currentIsDir = null;
let currentPath = null;
const selectedFilesMap = new Map(); // key: path, value: size string

function showSelected(path, size) {
  const list = document.getElementById("selectedFiles");
  if (!list) return;
  if (list.querySelector(`li[data-path="${path}"]`)) return;

  const item = document.createElement("li");
  item.textContent = `${path} (${formatBytes(size)})`;
  item.dataset.path = path;
  list.appendChild(item);
}

function removeSelected(path) {
  const list = document.getElementById("selectedFiles");
  if (!list) return;

  const item = list.querySelector(`li[data-path="${path}"]`);
  if (item) list.removeChild(item);
}

function formatBytes(bytes) {
  if (bytes === 0) return "0 B";
  const k = 1024;
  const sizes = ["B", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + " " + sizes[i];
}

function openPicker(targetId, isDir, path = "/mnt/") {
  document.getElementById("statusBox").innerText = "";
  if (isModalLocked) return;

  currentTargetId = targetId;
  currentIsDir = isDir;
  currentPath = path;

  const showHint = isDir || targetId === "inputFile";
  updateBreadcrumb(path);

  fetch(`/plugins/zip_manager/helpers/list_files.php?dir=${encodeURIComponent(path)}`)
    .then(res => res.json())
    .then(items => {
      if (items.error) {
        document.getElementById("statusBox").innerText = "‚ùå " + items.error;
        return;
      }

      const ul = document.getElementById("fileList");
      ul.innerHTML = "";

      if (path !== "/mnt/") {
        const liUp = document.createElement("li");
        liUp.style.marginLeft = "-9px";
        const spanUp = document.createElement("span");
        spanUp.textContent = "‚¨ÜÔ∏è Parent Directory";
        spanUp.style.color = "orange";
        spanUp.style.cursor = "pointer";
        spanUp.onclick = () => {
          let parentPath = path.endsWith("/") ? path.slice(0, -1) : path;
          parentPath = parentPath.substring(0, parentPath.lastIndexOf("/") + 1);
          if (!parentPath || parentPath.length < 6) parentPath = "/mnt/";
          openPicker(targetId, isDir, parentPath);
        };
        liUp.appendChild(spanUp);
        ul.appendChild(liUp);
      }

      const skipFolders = ['user0/', 'addons/', 'rootshare/'];
      const isOutputField = targetId === "outputDir";

      const filteredItems = items
        .filter(item => {
          if (skipFolders.includes(item.name)) return false;
          if (isOutputField && !item.name.endsWith("/")) return false;
          return true;
        })
        .sort((a, b) => {
          const aFolder = a.name.endsWith("/");
          const bFolder = b.name.endsWith("/");
          if (aFolder && !bFolder) return -1;
          if (!aFolder && bFolder) return 1;
          return a.name.localeCompare(b.name);
        });

      if (disallowedBaseFolders.length === 0 && path === "/mnt/") {
        disallowedBaseFolders = filteredItems
          .filter(item => item.name.endsWith("/"))
          .map(item => path + item.name);
      }

      const entries = filteredItems.map(item => ({
        name: item.name,
        size: item.size,
        fullPath: path + item.name,
        isFolder: item.name.endsWith("/")
      }));

      entries.forEach(entry => {
        const li = document.createElement("li");

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.style.marginRight = "8px";
        checkbox.dataset.fullPath = entry.fullPath;
        checkbox.dataset.isFolder = entry.isFolder;
        checkbox.className = "picker-checkbox";

        const span = document.createElement("span");
        const icon = entry.isFolder ? "üìÅ" : "üìÑ";
        const sizeStr = !entry.isFolder && entry.size > 0 ? ` (${formatBytes(entry.size)})` : "";
        span.textContent = `${icon} ${entry.name}${sizeStr}`;
        span.style.color = "orange";
        span.style.cursor = "pointer";
        span.style.fontFamily = "monospace";
        span.style.fontSize = "16px";

        const isDisallowed = disallowedBaseFolders.includes(entry.fullPath);
        if (isDisallowed && entry.isFolder) {
          span.title = "Can't be selected";
          checkbox.disabled = true;
        }

        span.onclick = () => {
          if (entry.isFolder) {
            openPicker(targetId, isDir, entry.fullPath);
          }
        };

        // ‚úÖ Restore checked state and display
        if (selectedFilesMap.has(entry.fullPath)) {
          checkbox.checked = true;
          showSelected(entry.fullPath, selectedFilesMap.get(entry.fullPath));
        }

        // ‚úÖ Attach change listener
        checkbox.addEventListener("change", () => {
          if (targetId === "outputDir") {
            document.querySelectorAll(".picker-checkbox").forEach(cb => {
              if (cb !== checkbox) cb.checked = false;
            });
          }

          if (checkbox.checked) {
            fetch(`/plugins/zip_manager/helpers/get_file_size.php?path=${encodeURIComponent(entry.fullPath)}`)
              .then(res => res.json())
              .then(data => {
                const size = data.bytes || 0;
                selectedFilesMap.set(entry.fullPath, size);
                showSelected(entry.fullPath, size);
              });
          } else {
            selectedFilesMap.delete(entry.fullPath);
            removeSelected(entry.fullPath);
          }
        });

        li.appendChild(checkbox);
        li.appendChild(span);
        ul.appendChild(li);
      });

      // ‚úÖ Add "Add Selected" button
      const addBtnId = "pickerAddSelected";
      if (!document.getElementById(addBtnId)) {
        const addBtn = document.createElement("button");
        addBtn.id = addBtnId;
        addBtn.textContent = "‚úÖ Add Selected";
        addBtn.style.cssText = `
          color: orange;
          background: #222;
          border: 1px solid orange;
          padding: 6px 12px;
          font-family: monospace;
          font-size: 14px;
          cursor: pointer;
          border-radius: 4px;
          margin-top: 8px;
        `;
        addBtn.onclick = () => {
          const selected = Array.from(document.querySelectorAll(".picker-checkbox:checked"));
          selected.forEach(cb => {
            const path = cb.dataset.fullPath;
            const isFolder = cb.dataset.isFolder === "true";

            fetch(`/plugins/zip_manager/helpers/get_file_size.php?path=${encodeURIComponent(path)}`)
              .then(res => res.json())
              .then(data => {
                const size = data.bytes || 0;

                if (currentTargetId === "inputFile") {
                  addFileToSelection(path, size);
                } else if (currentTargetId === "outputDir") {
                  document.getElementById("outputDir").value = path;

                  // ‚úÖ Close modal only for outputDir
                  document.getElementById("pickerModal").classList.remove("show");
                  document.getElementById("pickerModal").style.display = "none";
                }
              });
          });
        };
        document.getElementById("pickerModal").appendChild(addBtn);
      }

      // ‚úÖ Add "Done" button for inputFile
      const footerId = "pickerFooter";
      if (targetId === "inputFile" && !document.getElementById(footerId)) {
        const footer = document.createElement("div");
        footer.id = footerId;
        footer.style.cssText = `
          position: absolute;
          top: 25px;
          right: 0px;
          z-index: 9999;
        `;
        footer.innerHTML = `<button onclick="closeModal()" style="
          color: orange;
          background: #222;
          border: 1px solid orange;
          padding: 6px 12px;
          font-family: monospace;
          font-size: 14px;
          cursor: pointer;
          border-radius: 4px;
        ">‚úÖ Done</button>`;
        document.getElementById("pickerModal").appendChild(footer);
      }

      if (targetId !== "inputFile") {
        const existingFooter = document.getElementById(footerId);
        if (existingFooter) existingFooter.remove();
      }

      document.getElementById("pickerModal").style.display = "block";
    });
}

// üß© Tag Handler with Size Awareness
function addFileToSelection(path, size = 0) {
  const inputElem = document.getElementById("inputFile");
  const tagContainer = document.getElementById("selectedTags");
  const displaySpan = document.getElementById("fileCountDisplay");

  // üß† Parse current paths and check for duplicates
  const currentPaths = inputElem.value.split(',').map(p => p.trim()).filter(p => p);
  if (currentPaths.includes(path)) return;

  // ‚úÖ Update input field with new path
  currentPaths.push(path);
  inputElem.value = currentPaths.join(', ');

  // ‚úÖ Update size display (no enforcement)
  const currentTotal = parseInt(displaySpan.dataset.totalBytes || "0", 10);
  const newTotal = currentTotal + size;
  displaySpan.dataset.totalBytes = newTotal.toString();
  displaySpan.textContent = newTotal > 0 ? `üíæ ${formatBytes(newTotal)}` : "";

  // üè∑Ô∏è Create tag
  const tag = document.createElement("div");
  tag.textContent = path;
  tag.style.cssText = `
    background:#222; color:orange; padding:4px 8px; border-radius:4px;
    font-family:monospace; font-size:14px; display:inline-flex; align-items:center; gap:6px;
  `;

  // ‚ùå Remove button
  const removeBtn = document.createElement("span");
  removeBtn.textContent = "‚úñ";
  removeBtn.style.cssText = "cursor:pointer; color:red;";
  removeBtn.onclick = (event) => {
  event.stopPropagation();
    const updatedPaths = inputElem.value
      .split(',')
      .map(p => p.trim())
      .filter(p => p && p !== path);

    inputElem.value = updatedPaths.join(', ');

    tag.remove();

    const updatedTotal = parseInt(displaySpan.dataset.totalBytes || "0", 10) - size;
    displaySpan.dataset.totalBytes = updatedTotal.toString();
    displaySpan.textContent = updatedTotal > 0
      ? `üíæ ${formatBytes(updatedTotal)}`
      : "";

          // üßπ Fade out floating 'Done Selecting' button if no tags remain
  if (tagContainer.querySelectorAll(".selection-tag").length === 0) {
    const footer = document.getElementById("pickerFooter");
    if (footer) {
      footer.style.opacity = "0";
      footer.style.transform = "translateY(-10px)";
    }
  }
  };

  tag.appendChild(removeBtn);
  tagContainer.appendChild(tag);

  // ‚úÖ Show footer button if hidden
const footer = document.getElementById("pickerFooter");
if (footer && footer.style.opacity === "0") {
  footer.style.opacity = "1";
  footer.style.transform = "translateY(0)";
}
}

function updateBreadcrumb(path) {
  const breadcrumbDiv = document.getElementById("breadcrumb");
  breadcrumbDiv.innerHTML = "";

  if (!path.endsWith("/")) path += "/";

  if (!path.startsWith("/mnt/")) {
    path = "/mnt/";
  }

const rootSpan = document.createElement("span");
rootSpan.innerHTML = '<i class="fas fa-home" style="color:green;"></i>';
rootSpan.style.cursor = "pointer";
rootSpan.style.textDecoration = "underline";
rootSpan.onclick = () => openPicker(currentTargetId, currentIsDir, "/mnt/");
breadcrumbDiv.appendChild(rootSpan);

  let subPath = path.substring(5); // after /mnt/

  if (subPath.length > 0) {
    const parts = subPath.split("/").filter(p => p.length > 0);

    parts.forEach((part, idx) => {
      const sep = document.createElement("span");
      sep.textContent = "->";
      sep.className = "separator";
      breadcrumbDiv.appendChild(sep);

      const cumulativePath = "/mnt/" + parts.slice(0, idx + 1).join("/") + "/";

      const span = document.createElement("span");
      span.textContent = part;
      span.style.cursor = "pointer";
      span.style.textDecoration = "underline";
      span.onclick = () => openPicker(currentTargetId, currentIsDir, cumulativePath);
      breadcrumbDiv.appendChild(span);
    });
  }
}

function closeModal() {
  document.getElementById("pickerModal").style.display = "none";
}

document.addEventListener("click", (event) => {
  const modal = document.getElementById("pickerModal");
  if (modal.style.display === "block" && !modal.contains(event.target)) {
    closeModal();
  }
});

function shakeModal() {
  const modal = document.getElementById("pickerModal");
  modal.classList.add("shake");
  setTimeout(() => modal.classList.remove("shake"), 500);
}

function clearForm() {
  // Clear form fields
  document.getElementById("inputFile").value = "";
  document.getElementById("archivePassword").value = "";
  document.getElementById("outputDir").value = "";
  document.getElementById("archiveName").value = "archive";
  document.getElementById("selectedTags").innerHTML = "";

  // Clear messages
  document.getElementById("statusBox").innerText = "";
  document.getElementById("fileCountDisplay").textContent = "";
  document.getElementById("togglePasswordWrapper").style.display = "none";

  // Hide modals
  document.getElementById("pickerModal").style.display = "none";
  document.getElementById("overwriteModal").style.display = "none";

  // ‚úÖ Re-enable archive button
  const archiveButton = document.querySelector("button[onclick='runArchiving()']");
  if (archiveButton) archiveButton.disabled = false;

  window.location.href = window.location.href;
}

function runArchiving() {
  const input = document.getElementById("inputFile").value;
  const output = document.getElementById("outputDir").value;
  const password = document.getElementById("archivePassword").value || "";
  const format = document.getElementById("archiveFormat").value;
  const name = document.getElementById("archiveName").value.trim() || "archive";

  const statusBox = document.getElementById("statusBox");
  const archiveButton = document.querySelector("button[onclick='runArchiving()']");
  const modal = document.getElementById("overwriteModal");
  const list = document.getElementById("overwriteList");
  const confirmBtn = document.getElementById("overwriteConfirm");
  const cancelBtn = document.getElementById("overwriteCancel");

  statusBox.innerText = "";

  if (!input || !output || !name) {
    statusBox.innerText = "‚ùå Please select both files to archive and output directory.";
    return;
  }

  archiveButton.disabled = true;
  statusBox.innerText = "‚è≥ Checking for overwrite conflicts...";

  const checkEndpoint = `/plugins/zip_manager/helpers/check_archive_overwrites.php?input=${encodeURIComponent(input)}&output=${encodeURIComponent(output)}&format=${encodeURIComponent(format)}&name=${encodeURIComponent(name)}`;
  const archiveEndpoint = `/plugins/zip_manager/helpers/archive.php?input=${encodeURIComponent(input)}&output=${encodeURIComponent(output)}&password=${encodeURIComponent(password)}&format=${encodeURIComponent(format)}&name=${encodeURIComponent(name)}`;

  fetch(checkEndpoint)
    .then(res => res.json())
    .then(data => {
      if (data.exists) {
        list.innerHTML = "";

        const li = document.createElement("li");
        li.textContent = `üìÑ ${data.archive}`;
        li.style.marginBottom = "4px";
        li.style.color = "orange";
        li.style.fontFamily = "monospace";
        li.style.fontSize = "16px";
        list.appendChild(li);

        modal.style.display = "block";

        confirmBtn.onclick = () => {
          modal.style.display = "none";
          statusBox.innerText = "‚è≥ Archiving in progress...";

          fetch(archiveEndpoint)
            .then(res => res.text())
            .then(msg => {
              statusBox.innerText = msg;
              archiveButton.disabled = false;
              loadarchiveHistory();

              // üîÑ Reset form fields
              document.getElementById("inputFile").value = "";
              document.getElementById("outputDir").value = "";
              document.getElementById("archivePassword").value = "";
              document.getElementById("archiveName").value = "archive";
              document.getElementById("archiveFormat").value = "7z";
              document.getElementById("fileCountDisplay").textContent = "";
              document.getElementById("selectedTags").innerHTML = "";
              document.getElementById("togglePasswordWrapper").style.display = "none";
              updatePasswordVisibility();
            })
            .catch(err => {
              console.error("Archiving error:", err);
              statusBox.innerText = "‚ùå Archiving failed.";
              archiveButton.disabled = false;
            });
        };

        cancelBtn.onclick = () => {
          modal.style.display = "none";
          statusBox.innerText = "‚ùå Archiving canceled.";
          archiveButton.disabled = false;
        };

      } else {
        statusBox.innerText = "‚è≥ Archiving in progress...";

        fetch(archiveEndpoint)
          .then(res => res.text())
          .then(msg => {
            statusBox.innerText = msg;
            archiveButton.disabled = false;
            loadarchiveHistory();

            // üîÑ Reset form fields
            document.getElementById("inputFile").value = "";
            document.getElementById("outputDir").value = "";
            document.getElementById("archivePassword").value = "";
            document.getElementById("archiveName").value = "archive";
            document.getElementById("archiveFormat").value = "7z";
            document.getElementById("fileCountDisplay").textContent = "";
            document.getElementById("selectedTags").innerHTML = "";
            document.getElementById("togglePasswordWrapper").style.display = "none";
            updatePasswordVisibility();
          })
          .catch(err => {
            console.error("Archiving error:", err);
            statusBox.innerText = "‚ùå Archiving failed.";
            archiveButton.disabled = false;
          });
      }
    })
    .catch(err => {
      console.error("Overwrite check error:", err);
      statusBox.innerText = "‚ùå Could not check for existing archive.";
      archiveButton.disabled = false;
    });
}

// Auto-pulse #statusBox when content updates
const statusBox = document.getElementById("statusBox");
const observer = new MutationObserver(() => {
  statusBox.classList.remove("animate-pulse");
  void statusBox.offsetWidth;
  statusBox.classList.add("animate-pulse");
});
observer.observe(statusBox, { childList: true, characterData: true, subtree: true });

function loadarchiveHistory() {
  fetch("/plugins/zip_manager/helpers/get_archive_history.php")
    .then(res => res.text())
    .then(data => {
      document.getElementById("archiveLogBox").innerText = data;
    })
    .catch(() => {
      document.getElementById("archiveLogBox").innerText = "‚ùå Failed to load history.";
    });
}

const formatSelect = document.getElementById("archiveFormat");
const passwordField = document.getElementById("passwordField");
const passwordInput = document.getElementById("archivePassword");

function updatePasswordVisibility() {
  const selected = formatSelect.value;
  const requiresPassword = selected === "7z" || selected === "rar";

  if (requiresPassword) {
    passwordField.classList.remove("hidden");
  } else {
    passwordInput.value = "";
    passwordField.classList.add("hidden");
  }
}

// ‚úÖ Run on initial page load
updatePasswordVisibility();

// ‚úÖ Run every time the format changes
formatSelect.addEventListener("change", updatePasswordVisibility);

// Call it once on page load
loadarchiveHistory();

document.addEventListener("DOMContentLoaded", () => {
  const passwordInput = document.getElementById("archivePassword");
  const toggleWrapper = document.getElementById("togglePasswordWrapper");

  if (passwordInput && toggleWrapper) {
    passwordInput.addEventListener("input", () => {
      toggleWrapper.style.display = passwordInput.value ? "inline" : "none";
    });
  }
});
</script>
